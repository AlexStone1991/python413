"""
Разбор hw_18 - генератор пословиц

### Описание задачи

1. **Запрос на количество пословиц:**
   - В начале программы запросите у пользователя, сколько пословиц он хочет получить.

2. **Инициализация списков:**
   - Объявите переменные:
     - Пустой список для хранения результатов.
     - Два предоставленных списка: `proverbs` (список пословиц) и `variants` (список существительных).

3. **Цикл для генерации пословиц:**
   - В цикле выполняйте следующие шаги:
     1. Выбирайте случайный элемент из списка пословиц и удаляйте его из списка.
     2. Выбирайте случайное существительное из списка вариантов и также удаляйте его.
     3. Заменяйте слово "ум" в выбранной пословице на выбранное существительное.
     4. Добавляйте измененную пословицу в список результатов.

4. **Завершение цикла:**
   - Цикл продолжается до тех пор, пока не будет создано необходимое количество пословиц, запрошенное пользователем или вы не достигнете лимита.
"""

proverbs = [
    "Ум хорошо, а два лучше.",
    "Ум — горячая штука.",
    "Ум всё голова.",
    "Умом Россию не понять.",
    "Ум бережет, а глупость губит.",
    "Ум в голову приходит.",
    "Ум от ума не горит.",
    "Умом нагружен, а волосы развеваются.",
    "Умом обдумал, а ногами пошел.",
    "Ум — сокровище, не пропадет без него и копье на ветру.",
    "Ум — грех, а бес — мера.",
    "Ум есть богатство.",
    "Ум роднит народы.",
    "Ум краток, да забот — бездна.",
    "Ум не камень, взял и положил.",
    "Ум не велит, а наставляет.",
    "Ум с мерой, а глупость без меры.",
    "Ум — сокол, глаз его — телескоп.",
    "Ум — не конская морда, не разобьешь.",
    "Ум — семь пядей во лбу.",
    "Ум — не барсук, в нору не залезет.",
    "Ум в голове, а не на ветру.",
    "Ум греет душу, а глупость терпение.",
    "Ум служит человеку, а глупость — хозяином.",
    "Ум мил, да безумству хозяин.",
    "Ум в труде, да наслаждение в праздности.",
    "Ум глаза исправляет.",
    "Ум человека не обманешь.",
    "Ум на подобии огня — без сна не останешься.",
    "Ум к уму приходит.",
    "Ум с пользой тратит время.",
    "Ум желание творит.",
    "Ум общего дела дело.",
    "Ум — друг, а воля — враг.",
    "Ум — бесценное сокровище.",
    "Ум тонок, да разум невелик.",
    "Ум — враг бедности.",
    "Ум — теремок, да не на прокол.",
    "Ум силен, да не камень.",
    "Ум рассудит, что сердце не посоветует.",
    "Ум — подкова, а топор — ось.",
    "Ум легче камня, да весомей золота.",
    "Ум не вешать на гроздья.",
    "Ум — не мешок, на плечи не вешай.",
    "Ум — лучшая победа.",
    "Ум — в суде велик, а в деле своем мал.",
    "Ум голове краса.",
    "Ум — сокровище, а глупость — нищета.",
    "Ум человека — огонь, а глаза — масло.",
    "Ум — путь, а дорога — конец.",
    "Ум стоит денег.",
    "Ум от смеха бьет в ладоши.",
    "Ум — коза, к барскому плечу привыкает.",
    "Ум — лезвие, а лень — ржавчина.",
    "Ум на вершине — мир в руках.",
]

variants = [
    "кот",
    "шеф",
    "мозг",
    "лес",
    "фолк",
    "код",
    "рот",
    "мёд",
    "лук",
    "лес",
    "год",
    "час",
    "друг",
    "муж",
    "айфон",
    "стол",
    "нос",
    "сыр",
    "хлеб",
    "мир",
    "свет",
    "рок",
    "дед",
    "дом",
    "сон",
    "глаз",
    "торт",
    "драйв",
    "байк",
    "джаз",
    "грим",
    "рэп",
    "старт",
    "пинг-понг",
    "каприз",
    "драйф",
    "размах",
    "панк",
    "размер",
    "перекус",
    "блеск",
    "накал",
    "размен",
    "кураж",
    "форсаж",
    "прорыв",
]

# user_input = int(input("Сколько пословиц вы хотите получить? "))

# result = []

# proverbs = set(proverbs)
# variants = set(variants)


# while - можно сделать while True: - и внутри цикла сделать break
# while - можно сразу описать условия остановки

# while True:
#     # Проверка что ОБЕ коллекции ещё не пустые
#     if not (proverbs and variants):
#         break

#     # Проверка выдали ли мы нужное количество пословиц
#     if len(result) == user_input:
#         break

#     # Делаем работу с коллекциями

#     proverb = proverbs.pop()
#     variant = variants.pop()

#     new_proverb = proverb.lower().replace("ум", variant).capitalize()
#     result.append(new_proverb)


# Вариант №2

# while len(result) < user_input and proverbs and variants:
#     proverb = proverbs.pop()
#     variant = variants.pop()

#     new_proverb = proverb.lower().replace("ум", variant).capitalize()
#     result.append(new_proverb)

# print(len(proverbs))
# print(len(variants))
# print(len(proverbs) * len(variants))

from random import shuffle

max_count = len(proverbs) * len(variants)
print(f"Максимальное количество пословиц: {max_count}")

user_input = int(input("Сколько пословиц вы хотите получить? "))

if user_input > max_count:
    user_input = max_count
    print(f"Вы можете получить максимум {max_count} пословиц")

result = []

# Делаем цикл в цикле для получения ВСЕХ комбинаций

for proverb in proverbs:
    for variant in variants:
        new_proverb = proverb.lower().replace("ум", variant).capitalize()
        result.append(new_proverb)

# Перемешиваем список
shuffle(result)

# Выводим результат
result = result[:user_input]
print(result)
