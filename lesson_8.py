"""
Урок 8
15.12.2023

1. Сеты. Хеширование и рандом на практике (орел решка)
2. Методы сетов (анализ коллекции фильмов)
3. Знакомство со словарями

"""








# PRACTICE Орел Решка на сетах
"""
Подкидываем монетку через while и сеты
1. Сделайте переменную счетчик (опционально, это может быть пользовательским вводом - сколько хотите раз подкинуть монетку)
2. Сделайте цикл while пока счетчик меньше 10
3. Внутри цикла сделайте сет с 2 строками, орел, решка
4. Сделайте принт сет.pop и счетчик + 1
"""
# coin_set = {"орел", "решка"}
# print(coin_set.pop())

THROUGHOUT = 100


for i in range(THROUGHOUT):
    coin_set = {"орел", "решка"}
    print(coin_set.pop())


"""

Давайте разберем полную картину:

В Python строковые литералы (строки в кавычках) интернируются - это значит, что Python повторно использует уже созданные строки вместо создания новых копий. Когда вы пишете {'орел', 'решка'} много раз в цикле, Python не создает новые строки каждый раз, а использует ссылки на уже существующие.

Представьте это как колоду карт:

У вас есть две карты: Туз ♠️ (орел) и Король ♠️ (решка)
Каждый раунд вы:
Берете КОПИИ этих же самых карт (но это те же самые карты, просто новая колода)
Раскладываете их по тем же правилам (хеширование)
Туз всегда ложится слева, потому что его "вес" (хеш) меньше
Король всегда справа
Берете левую карту (pop берет первый элемент по хешу)
И получаете каждый раз Туза!

"""
